{"version":3,"sources":["../../../../src/codemirror/mode/javascript/javascript.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","type","style","A","B","C","D","operator","atom","isOperatorChar","readRegexp","stream","escaped","next","inSet","content","ret","tp","cont","tokenBase","state","ch","tokenize","tokenString","match","test","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","maybeEnd","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","parseJS","cc","marked","hasOwnProperty","combinator","length","pop","expression","statement","lex","pass","i","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","typeprop","functiondecl","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","Pass","firstChar","top","c","closing","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME"],"mappings":"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","sourcesContent":["/*eslint-disable*/\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    if (type == \"import\") return cont(expression);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(expression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      var top = state.cc[state.cc.length - 1]\n      if (top == expression || top == expressionNoComma) state.cc.pop()\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"file":"javascript.min.js"}